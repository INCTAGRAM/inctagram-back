// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  username          String             @unique
  email             String             @unique
  hash              String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  passwordRecovery  PasswordRecovery?
  emailConfirmation EmailConfirmation?
  deviceSession     DeviceSession[]
  avatar            Avatar?
  profile           Profile?
  post              Post[]
}

model Profile {
  id        String    @id @default(uuid())
  name      String?
  surname   String?
  birthday  DateTime?
  city      String?
  aboutMe   String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Token {
  accessTokenHash  String
  refreshTokenHash String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deviceSession    DeviceSession? @relation(fields: [deviceSessionId], references: [deviceId], onDelete: Cascade)
  deviceSessionId  String         @unique
}

model DeviceSession {
  ip             String
  deviceName     String
  createdAt      DateTime @default(now())
  lastActiveDate DateTime @updatedAt
  deviceId       String   @unique
  user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?
  token          Token?
}

model PasswordRecovery {
  recoveryCode   String?
  expirationDate String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String   @unique
}

model EmailConfirmation {
  confirmationCode String
  expirationDate   String
  isConfirmed      Boolean
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail        String   @unique
}

model Avatar {
  id         String   @id @default(uuid())
  url        String?
  previewUrl String?
  size       Int?
  height     Int?
  width      Int?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Post {
  id     String  @id @default(uuid())
  userId String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  images Image[]
}

model Image {
  id          String         @id @default(uuid())
  url         String
  previewUrl  String?
  description String?        @db.VarChar(500)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  postId      String
  post        Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  metadata    ImageMetadata?
}

enum Ratio {
  ORIGINAL
  PORTRAIT
  LANDSCAPE
  SQUARE
}

model ImageMetadata {
  id        String         @id @default(uuid())
  zoom      Int?           @default(0)
  ratio     Ratio?         @default(SQUARE)
  cropInfo  ImageCropInfo?
  filters   String[]
  size      Int
  height    Int
  width     Int
  imageId   String         @unique
  image     Image          @relation(fields: [imageId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model ImageCropInfo {
  id         String        @id @default(uuid())
  x          Int?
  y          Int?
  height     Int?
  width      Int?
  metadataId String        @unique
  metadata   ImageMetadata @relation(fields: [metadataId], references: [id], onDelete: Cascade)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}
