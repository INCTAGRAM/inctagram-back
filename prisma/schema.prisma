// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  username          String             @unique
  email             String             @unique
  hash              String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  accountPlan       AccountPlan        @default(PERSONAL)
  passwordRecovery  PasswordRecovery?
  emailConfirmation EmailConfirmation?
  deviceSession     DeviceSession[]
  avatar            Avatar?
  profile           Profile?
  post              Post[]
  oauthAccount      OauthAccount[]
  payment           Payment[]
  subscription      Subscription[]
}

enum OauthProvider {
  GITHUB
  GOOGLE
}

model OauthAccount {
  id               String        @id @default(uuid())
  clientId         String
  type             OauthProvider
  linked           Boolean       @default(false)
  mergeCode        String?
  mergeCodeExpDate DateTime?
  user             User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String

  @@unique([clientId, type])
}

model Profile {
  id        String    @id @default(uuid())
  name      String?
  surname   String?
  birthday  DateTime?
  city      String?
  aboutMe   String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Token {
  accessTokenHash  String
  refreshTokenHash String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deviceSession    DeviceSession? @relation(fields: [deviceSessionId], references: [deviceId], onDelete: Cascade)
  deviceSessionId  String         @unique
}

model DeviceSession {
  ip             String
  deviceName     String
  createdAt      DateTime @default(now())
  lastActiveDate DateTime @updatedAt
  deviceId       String   @unique
  user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?
  token          Token?
}

model PasswordRecovery {
  recoveryCode   String?
  expirationDate String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String   @unique
}

model EmailConfirmation {
  confirmationCode String
  expirationDate   String
  isConfirmed      Boolean
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail        String   @unique
}

model Avatar {
  id         String   @id @default(uuid())
  url        String?
  previewUrl String?
  size       Int?
  height     Int?
  width      Int?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Post {
  id          String   @id @default(uuid())
  userId      String
  description String?  @db.VarChar(500)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  images      Image[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Image {
  id         String         @id @default(uuid())
  url        String
  previewUrl String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  postId     String
  post       Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  metadata   ImageMetadata?
}

model ImageMetadata {
  id        String   @id @default(uuid())
  size      Int
  height    Int
  width     Int
  imageId   String   @unique
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Subscriptions 
enum AccountPlan {
  PERSONAL
  BUSINESS
}

enum Currency {
  USD
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  REJECTED
}

enum PaymentReference {
  SUBSCRIPTION
  OTHER
}

enum PaymentProvider {
  STRIPE
  PAYPAL
}

enum SubscriptionType {
  ONETIME
  RECCURING
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
}

model Payment {
  id                  String               @id @default(uuid())
  user                User                 @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId              String
  currency            Currency
  price               Float
  status              PaymentStatus
  reference           PaymentReference     @default(SUBSCRIPTION)
  provider            PaymentProvider
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  subscriptionPayment SubscriptionPayment?
}

model SubscriptionPayment {
  id                     String                  @id @default(uuid())
  info                   Json?
  providerSubscriptionId String?
  payment                Payment                 @relation(references: [id], fields: [paymentId], onDelete: Cascade)
  paymentId              String                  @unique
  period                 Int
  pricingPlan            SubscriptionPricingPlan @relation(references: [id], fields: [pricingPlanId], onDelete: Cascade)
  pricingPlanId          String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  subscription           Subscription?
}

model SubscriptionPricingPlan {
  id                  String                @id @default(uuid())
  providerPriceId     String
  priceId             String
  provider            PaymentProvider
  subscriptionType    SubscriptionType
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  subscriptionPayment SubscriptionPayment[]
}

model SubscriptionPrice {
  id        String   @id @default(uuid())
  currency  Currency
  value     Float
  period    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id                    String              @id @default(uuid())
  endDate               DateTime            @db.Timestamptz(3)
  startDate             DateTime            @default(now()) @db.Timestamptz(3)
  status                SubscriptionStatus
  type                  SubscriptionType
  user                  User                @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId                String
  subscriptionPayment   SubscriptionPayment @relation(references: [id], fields: [subscriptionPaymentId], onDelete: Cascade)
  subscriptionPaymentId String              @unique
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}
